version: '3.9'

services:
  db:
    image: postgres:17-alpine
    container_name: menu_db
    restart: always
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: menu_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: menu_web
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    expose:
      - 8000
    volumes:
      - ./backend/translate:/home/app/backend/translate:ro
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/media
    restart: always

  frontend:
    build:
      context: ./AS_Cikolata
      dockerfile: Dockerfile
    container_name: menu_frontend
    ports:
      - "3000:80"
    restart: always
    depends_on:
      - web
  nginx:
    image: nginx:1.27-alpine
    container_name: menu_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Файлы билда React
      - ./AS_Cikolata/dist:/usr/share/nginx/html
      # Конфиги
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # SSL-сертификаты
      - ./certs:/etc/letsencrypt:ro
      # Django static/media
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/media
    depends_on:
      - web
      - frontend

volumes:
  postgres_data:
  static_volume:
  media_volume:
